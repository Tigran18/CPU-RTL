$date
	Fri Dec 13 01:03:52 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_top $end
$var wire 1 ! y $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$var reg 8 $ sn1 [7:0] $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 8 % sn1 [7:0] $end
$var wire 1 ! y $end
$var wire 3 & sel [2:0] $end
$var wire 8 ' q [7:0] $end
$scope begin genblk1[0] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 ( d $end
$var wire 1 # reset $end
$var reg 1 ) q $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 * d $end
$var wire 1 # reset $end
$var reg 1 + q $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 , d $end
$var wire 1 # reset $end
$var reg 1 - q $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 . d $end
$var wire 1 # reset $end
$var reg 1 / q $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 0 d $end
$var wire 1 # reset $end
$var reg 1 1 q $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 2 d $end
$var wire 1 # reset $end
$var reg 1 3 q $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 4 d $end
$var wire 1 # reset $end
$var reg 1 5 q $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module dff_inst $end
$var wire 1 " clk $end
$var wire 1 6 d $end
$var wire 1 # reset $end
$var reg 1 7 q $end
$upscope $end
$upscope $end
$scope module counter_inst $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var reg 3 8 count [2:0] $end
$upscope $end
$scope module mux_inst $end
$var wire 8 9 d [7:0] $end
$var wire 3 : sel [2:0] $end
$var wire 1 ! y $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ; i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ;
b0 :
b0 9
b0 8
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
b0 '
b0 &
b0 %
b0 $
1#
0"
0!
$end
#5
1"
#10
0"
b0 ;
0#
#15
b1 &
b1 8
b1 :
1"
#20
1(
0"
b1 ;
b1 $
b1 %
#25
b10 &
b10 8
b10 :
b1 '
b1 9
1)
1"
#30
0(
1*
0"
b10 ;
b10 $
b10 %
#35
0)
b10 '
b10 9
1+
b11 &
b11 8
b11 :
1"
#40
1(
0"
b11 ;
b11 $
b11 %
#45
b100 &
b100 8
b100 :
b11 '
b11 9
1)
1"
#50
0(
0*
1,
0"
b100 ;
b100 $
b100 %
#55
0)
0+
b100 '
b100 9
1-
b101 &
b101 8
b101 :
1"
#60
1(
0"
b101 ;
b101 $
b101 %
#65
b110 &
b110 8
b110 :
b101 '
b101 9
1)
1"
#70
0(
1*
0"
b110 ;
b110 $
b110 %
#75
0)
b110 '
b110 9
1+
b111 &
b111 8
b111 :
1"
#80
1(
0"
b111 ;
b111 $
b111 %
#85
1!
b0 &
b0 8
b0 :
b111 '
b111 9
1)
1"
#90
0(
0*
0,
1.
0"
b1000 ;
b1000 $
b1000 %
#95
0)
0!
0+
0-
b1000 '
b1000 9
1/
b1 &
b1 8
b1 :
1"
#100
0"
#105
b10 &
b10 8
b10 :
1"
#110
0"
#115
1!
b11 &
b11 8
b11 :
1"
#120
0"
#125
0!
b100 &
b100 8
b100 :
1"
#130
0"
#135
b101 &
b101 8
b101 :
1"
#140
0"
#145
b110 &
b110 8
b110 :
1"
#150
0"
#155
b111 &
b111 8
b111 :
1"
#160
0"
#165
b0 &
b0 8
b0 :
1"
#170
0"
