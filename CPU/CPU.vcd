$date
	Tue Apr  1 23:37:59 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU_tb $end
$var wire 8 ! reg5 [7:0] $end
$var wire 8 " reg4 [7:0] $end
$var wire 8 # reg3 [7:0] $end
$var wire 8 $ reg2 [7:0] $end
$var wire 8 % reg1 [7:0] $end
$var reg 1 & clk $end
$var reg 1 ' cs $end
$var reg 1 ( reset $end
$var reg 1 ) we $end
$scope module u_CPU $end
$var wire 1 & clk $end
$var wire 1 ' cs $end
$var wire 8 * reg5 [7:0] $end
$var wire 1 ( reset $end
$var wire 1 ) we $end
$var wire 8 + result [7:0] $end
$var wire 8 , instruction [7:0] $end
$var wire 8 - data2 [7:0] $end
$var wire 8 . data1 [7:0] $end
$var reg 8 / data_in [7:0] $end
$var reg 4 0 program_counter [3:0] $end
$var reg 8 1 reg1 [7:0] $end
$var reg 8 2 reg2 [7:0] $end
$var reg 8 3 reg3 [7:0] $end
$var reg 8 4 reg4 [7:0] $end
$scope module u1_decoder $end
$var wire 8 5 register1 [7:0] $end
$var wire 8 6 register2 [7:0] $end
$var wire 8 7 register3 [7:0] $end
$var wire 8 8 register4 [7:0] $end
$var wire 2 9 sel [1:0] $end
$var reg 8 : data [7:0] $end
$upscope $end
$scope module u2_decoder $end
$var wire 8 ; register1 [7:0] $end
$var wire 8 < register2 [7:0] $end
$var wire 8 = register3 [7:0] $end
$var wire 8 > register4 [7:0] $end
$var wire 2 ? sel [1:0] $end
$var reg 8 @ data [7:0] $end
$upscope $end
$scope module u_ALU $end
$var wire 8 A data1 [7:0] $end
$var wire 8 B data2 [7:0] $end
$var wire 2 C opcode [1:0] $end
$var reg 8 D result [7:0] $end
$upscope $end
$scope module u_SRAM $end
$var wire 1 ' CS $end
$var wire 1 ) WE $end
$var wire 4 E addr [3:0] $end
$var wire 1 & clk $end
$var wire 8 F data_in [7:0] $end
$var parameter 32 G ADDR $end
$var parameter 32 H LENGTH $end
$var parameter 32 I WIDTH $end
$var reg 8 J data_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 I
b10000 H
b100 G
$end
#0
$dumpvars
bx J
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
0)
1(
0'
0&
bx %
bx $
bx #
bx "
bx !
$end
#1
b0 0
b0 E
b0 "
b0 4
b0 8
b0 >
b0 #
b0 3
b0 7
b0 =
b0 $
b0 2
b0 6
b0 <
b0 %
b0 1
b0 5
b0 ;
1&
#2
0&
#3
1&
#4
0&
#5
1&
#6
0&
#7
1&
#8
0&
#9
1&
#10
0&
1'
0(
#11
b1 0
b1 E
1&
#12
0&
#13
b10 0
b10 E
1&
#14
0&
0'
#15
b11 0
b11 E
1&
#16
0&
1'
#17
b100 0
b100 E
1&
#18
0&
#19
b101 0
b101 E
1&
#20
0&
0'
#21
b110 0
b110 E
1&
#22
0&
1)
#23
b111 0
b111 E
1&
#24
0&
1'
#25
b1000 0
b1000 E
1&
#26
0&
#27
b1001 0
b1001 E
1&
#28
0&
0'
#29
b1010 0
b1010 E
1&
#30
0&
1'
#31
b1011 0
b1011 E
1&
#32
0&
#33
b1100 0
b1100 E
1&
#34
0&
#35
b1101 0
b1101 E
1&
#36
0&
0'
#37
b1110 0
b1110 E
1&
#38
0&
1'
#39
b1111 0
b1111 E
1&
#40
0&
#41
b0 0
b0 E
1&
#42
0&
0'
